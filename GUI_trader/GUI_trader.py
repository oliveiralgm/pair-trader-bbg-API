#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Mon Sep 08 13:44:33 2014
#

'''

Boa parte do codigo deste modulo foi gerado automaticamente pelo WXGlade - como inserido acima - portanto nao sera
comentado com detalhe.

O codigo inserida pelo autor sera devidamente comentado.

O Objetivo deste GUI eh controlar os Traders e poder enxergar o que esta acontecendo com as ordens enviadas no mercado
assim como poder saber o que esta acontecendo com o proprio trader e suas conexoes.



'''


# Importa as dependencias do codigo
import wx
import os
import roundButton
import PairTrader
import testeexe
import wx.lib.dialogs
import wx.lib.mixins.listctrl as listmix
import gettext
import xlrd
from enum import Enum
import time
from wx.lib.pubsub import pub
import logging
import pair_trader.pair_trader


# cria o arquivo de LOG
logging.basicConfig(filename="GUI - LOGPROD1.log", level=logging.INFO, format='%(asctime)s - %(levelname)s - %(threadName)-10s - %(message)s', )

# Classes de Enum para acessar itens em Estruturas de dados
# Enum da lista das ordens de apregoamento
class placeOrderData(Enum):
    TICKER              = 0
    AMOUNT              = 1
    TYPE                = 2
    TIF                 = 3
    HAND_INSTR          = 4
    SIDE                = 5
    BROKER              = 6
    ACCOUNT             = 7
    TRADER_NOTES        = 8
    CORRID              = 9
    BROKER_STRATEGY     = 10
    USE_STRAT           = 11
    ORDER_SENT          = 12
    AVG_PRC             = 13
    LMTPRC              = 14
    FILL                = 15
    SPREAD_REQ          = 16
    RATIO               = 17
    USEFX               = 18
    TOTPAIRVOL          = 19 # posicao total do par a ser estartadod


# Enum da lista das ordens de fechamento da operacao de arbitragem
class closeOrderData(Enum):
    TICKER              = 0
    AMOUNT              = 1
    TYPE                = 2
    TIF                 = 3
    HAND_INSTR          = 4
    SIDE                = 5
    BROKER              = 6
    ACCOUNT             = 7
    TRADER_NOTES        = 8
    CORRID              = 9
    BROKER_STRATEGY     = 10
    USE_STRAT           = 11
    ORDER_SENT          = 12
    AVG_PRC             = 13
    LMTPRC              = 14
    FILL                = 15

# Enum da lista de info de FX
class FXData(Enum):
    TICKER              = 0
    PRICE               = 1
    CASADO_BID          = 2
    CASADO_ASK          = 3



# Classe do GUI
class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__

        # cria a variavel da lista dos objetos de Traders inseridos no GUI
        global Pairs
        # cria a variavel que recebe os indices dos traders do GUI
        global pairIndex
        # cria o a variavel do excel de onde o GUI carrega os dados
        global sheet
        # instancia o dicionario do indice de pares
        pairIndex = dict()
        # inicializa a lista de pares
        Pairs = []
        # indice dos traders inseridos no GUI
        self.index = 0
        # define o estilo do Frame
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        # inicaliza o FRAME
        wx.Frame.__init__(self, *args, **kwds)

        boldFont = wx.FFontFromPixelSize((0,32), wx.DEFAULT, flags=wx.FONTFLAG_BOLD)

        # inicializa os botoes de controle
        self.Load = roundButton.RoundButton(self, wx.ID_ANY, 'Load', size=(80, 80))
        self.Load.SetFontToFitLabel( boldFont )
        # self.Load = wx.Button(self, wx.ID_ANY, _("Load"))
        self.Start_All = roundButton.RoundButton(self, wx.ID_ANY, "Start All", size=(80, 80))
        self.Start_All.SetBackgroundColour(wx.WHITE)
        self.Start_All.SetForegroundColour(wx.GREEN)
        self.Start_All.SetFontToFitLabel( boldFont )
        self.Stop_all = roundButton.RoundButton(self, wx.ID_ANY, "Stop All", size=(80, 80))
        self.Stop_all.SetBackgroundColour(wx.WHITE)
        self.Stop_all.SetForegroundColour(wx.RED)
        self.Stop_all.SetFontToFitLabel( boldFont )
        self.Stop_Pair = roundButton.RoundButton(self, wx.ID_ANY, _("Stop Pair"), size=(80, 80))
        self.Stop_Pair.SetFontToFitLabel( boldFont )
        self.Edit = roundButton.RoundButton(self, wx.ID_ANY, _("Edit"), size=(80, 80))
        self.Edit.SetFontToFitLabel( boldFont )
        self.Pause = roundButton.RoundButton(self, wx.ID_ANY, _("Pause"), size=(80, 80))
        self.Pause.SetFontToFitLabel( boldFont )
        self.ViewConnectionBt = roundButton.RoundButton(self, wx.ID_ANY, _("Conn"), size=(80, 80))
        self.ViewConnectionBt.SetFontToFitLabel( boldFont )
        self.Start_Pair = roundButton.RoundButton(self, wx.ID_ANY, _("Start Pair"), size=(80, 80))
        self.Start_Pair.SetBackgroundColour(wx.WHITE)
        self.Start_Pair.SetForegroundColour(wx.YELLOW)
        self.Start_Pair.SetFontToFitLabel( boldFont )
        self.Clear_All = roundButton.RoundButton(self, wx.ID_ANY, _("Clear All"), size=(80, 80))
        self.Clear_All.SetFontToFitLabel( boldFont )
        self.Clear_Pair = roundButton.RoundButton(self, wx.ID_ANY, _("Clear Pair"), size=(80, 80))
        self.Clear_Pair.SetFontToFitLabel( boldFont )
        # self.roundbutton = RoundButton()
        self.list_ctrl_1 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)

        self.list_ctrl_1.SetBackgroundColour(wx.LIGHT_GREY)
        self.list_ctrl_1.SetTextColour(wx.BLUE)

        self.bitmap_1 = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap("xplogo.png", wx.BITMAP_TYPE_ANY))
        self.bitmap_1.SetBackgroundColour(wx.WHITE)



        # self.list_ctrl_1 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.LC_AUTOARRANGE |
        #     wx.LC_EDIT_LABELS | wx.LC_SINGLE_SEL | wx.SUNKEN_BORDER | wx.FULL_REPAINT_ON_RESIZE)

        self.__set_properties()
        self.__do_layout()

        # cria a conexao entre o widget e o evento com o respectivo callback
        self.Bind(wx.EVT_BUTTON, self.LoadData, self.Load)
        self.Bind(wx.EVT_BUTTON, self.StartAll, self.Start_All)
        self.Bind(wx.EVT_BUTTON, self.StopAll, self.Stop_all)
        self.Bind(wx.EVT_BUTTON, self.Edit_Pair, self.Edit)
        self.Bind(wx.EVT_BUTTON, self.Pause_Pair, self.Pause)
        self.Bind(wx.EVT_BUTTON, self.View_Connection, self.ViewConnectionBt)
        self.Bind(wx.EVT_BUTTON, self.StartPair, self.Start_Pair)
        self.Bind(wx.EVT_BUTTON, self.ClearAll, self.Clear_All)
        self.Bind(wx.EVT_BUTTON, self.ClearPair, self.Clear_Pair)
        self.Bind(wx.EVT_BUTTON, self.StopPair, self.Stop_Pair)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.ShowMenu, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.Select_Pair, self.list_ctrl_1)
        self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)

        # end wxGlade


        # insere as colunas das informacoes dos traders
        self.list_ctrl_1.InsertColumn(0, 'Pair Details', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(1, 'Market Spread', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(2, 'Volume Operado', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(3, 'Pair Status', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(4, 'Posicao', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(5, 'Spread Requisitado - U$', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(6, 'Spread Realizado - U$', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(7, 'Avg Spread - U$', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(8, 'Ultima Margem realizada - U$', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(9, 'PNL Acumulado - U$', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(10, 'Ratio', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(11, 'Ticker FX', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(12, 'Price FX', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(13, 'Ticker Apregoado', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(14, 'Side Apregoado', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(15, 'Volume Apregoado', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(16, 'Price Apregoa', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(17, 'Ticker Fechamento', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(18, 'Side Fechamento', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(19, 'Volume Fechado', wx.LIST_AUTOSIZE)
        self.list_ctrl_1.InsertColumn(20, 'Price Close', wx.LIST_AUTOSIZE)



        # subscreve os listeners por topico que serao atualizados nas colunas acima
        pub.subscribe(self.listenerplacePrice, 'subplacePrice')
        pub.subscribe(self.listenerclosePrice, 'subclosePrice')
        pub.subscribe(self.listenerOrderStatus, 'suborderStatus')
        pub.subscribe(self.listenertradedVolume, 'subtradedVolume')
        pub.subscribe(self.listenerPosition, 'subposition')
        pub.subscribe(self.listenerRealSpread, 'subrealSpread')
        pub.subscribe(self.listenerAvgSpread, 'subavgSpread')
        pub.subscribe(self.listenerlastGross, 'sublastGross')
        pub.subscribe(self.listenerPNL, 'subPNL')
        pub.subscribe(self.listenerFXPrice, 'subFXPrice')
        pub.subscribe(self.listenerMarketSpread, 'subMarketSpread')

        logging.info(" ")
        logging.info(" ")
        logging.info("Inicializou o GUI")
        logging.info(" ")
        logging.info(" ")

    # define as propriedades do FRAME
    def __set_properties(self):
        # begin wxGlade: MyFrame1.__set_properties
        self.SetSize((1500, 800))
        self.SetTitle(("Pair Arbitrage Trading - XP Securities, LLC - Proprietary Desk - PRODUCAO"))

        # end wxGlade

    # callback do fechamento da janela
    def OnCloseWindow(self, event):
        dialog = wx.MessageDialog(self, message = "Are you sure you want to quit?", caption = "Exit SpreadSniper II", style = wx.YES_NO, pos = wx.DefaultPosition)
        response = dialog.ShowModal()

        if (response == wx.ID_YES):
            Pairs = []
            self.list_ctrl_1.DeleteAllItems()
            self.index = 0
            try:
                os.system('taskkill /f /im ' + self.marketdatafile) # fecha o processo do MKT data
                os.system('taskkill /f /im ' + self.OMSdatafile) # fecha o processo do OMS
            except:
                pass
            self.Destroy()
        # elif (response == wx.ID_NO):
        #     wx.CloseEvent.Veto(event, True)
        # event.Skip()

    # define o layout do GUI
    def __do_layout(self):
        # begin wxGlade: MyFrame1.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.Load, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Start_All, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Stop_all, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Start_Pair, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Stop_Pair, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Clear_Pair, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Edit, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Pause, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.ViewConnectionBt, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.Clear_All, 0, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.bitmap_1, 0, wx.ALL | wx.EXPAND, 5)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add(self.list_ctrl_1, 8, wx.ALL | wx.EXPAND, 10)
        self.SetSizer(sizer_2)
        # sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

    # Carrega os dados dos traders inseridos no GUI e instancia o trader referente aos dados carregados
    def LoadData(self, event):  # wxGlade: MyFrame1.<event_handler>
        logging.info("Em LoadData - vai inicalizar os dados e criar os Pares")
        # variavel do novo par instanciado
        global newPair
        # abre a caixa de dialogo para selecionar o arquivo de dados a serem carregados
        file_locations = get_path('*.*', 'Escolha o arquivo com os pares para inicilizacao do Algoritmo')

        # abre o arquivo selecionado na linha acima
        workbook = xlrd.open_workbook(file_locations)
        # time.sleep(5)
        # escolhe a aba onde estao os dados
        sheet = workbook.sheet_by_index(0)
        # pairCounter = 0
        # pega o numero de linhas utilizadas na aba dos dados
        numberofrows = sheet.nrows

        try:
            for row in range(numberofrows):
                # cada par inicia sua linha por PT# - # numero do par
                if sheet.cell_value(row,0)[0:2] == 'PT':
                    # cria uma instancia do par para aquele conjunto de dados
                    newPair = PairTrader_TesteGUI_NEW.Pair()
                    # adiciona o par aa lista de objetos de traders
                    Pairs.append(newPair)
                    # Coleta os dados dentro do excel selecionado e retorna os vetores de dados
                    [Placedata, Closedata, FXdata] = testeexe.GetData(row, sheet)
                    # print Placedata
                    # print Closedata
                    # inicializa os dados do novo trader criado
                    newPair.initializeData(Placedata, Closedata, FXdata)
                    # adiciona uma linha no GUI
                    self.add_line(Placedata, Closedata, FXdata)
                    # associa o indice do trader no dicionario PairIndex ao objeto do trader criado
                    pairIndex[newPair.dataPlace[placeOrderData.CORRID.value]] = self.index - 1
                    print str(pairIndex)
                    print str(pairIndex[newPair.dataPlace[placeOrderData.CORRID.value]])
                    logging.info("Em LoadData - criou o par: " + str(newPair.dataPlace[placeOrderData.CORRID.value]))
                event.Skip()
        except:
            pass

        try:
            # abre a caixa de dialogo para selecionar o arquivo de dados a serem carregados
            self.mktdata_path = get_path('*.*', 'Escolha o servidor de Market Data')

            self.marketdatafile = self.mktdata_path.split("\\")

            self.marketdatafile = self.marketdatafile[len(self.marketdatafile)-1]

            os.startfile(self.mktdata_path)

            # abre a caixa de dialogo para selecionar o arquivo de dados a serem carregados

            self.OMS_path = get_path('*.*', 'Escolha o OMS')

            self.OMSdatafile = self.OMS_path.split("\\")

            self.OMSdatafile = self.OMSdatafile[len(self.OMSdatafile)-1]

            os.startfile(self.OMS_path)
        except:
            wx.MessageBox("Algum dos servidores nao abriu ou voce escolheu nao abrir automaticamente. Se isso nao foi intencional "
                          "reinicie o sistema ou contacte o HelpDesk, Obrigado")

    # inicia todos os traders no GUI
    def StartAll(self, event):  # wxGlade: MyFrame1.<event_handler>
        for pair in Pairs:
            print str(pair)
            print pair.ticker_Place
            logging.info("Em startAll - criou o par: " + str(pair.ticker_Place) + " - " + str(pair.dataPlace[placeOrderData.CORRID.value]))
            pair.start_pair()
            time.sleep(0.1)
        event.Skip()

    # cancela todos os traders operando no GUI - Cancela as ordens em aberto e corta as conexoes
    def StopAll(self, event):  # wxGlade: MyFrame1.<event_handler>
        for pair in Pairs:
            # cancela as ordens abertas e para as conexoes do trader
            pair.stop_pair()
            logging.info("Em stopAll - parou o par: " + str(pair.ticker_Place) + " - " + str(pair.dataPlace[placeOrderData.CORRID.value]))
            # time.sleep(0.01)
        event.Skip()

        try:
            os.system('taskkill /f /im ' + self.marketdatafile) # fecha o processo do MKT data
            os.startfile(self.mktdata_path) # reinicia o mktdata
        except:
            wx.MessageBox("O servidor de Market Data nao foi aberto pelo sistema, se for necessario reinicie manualmente")

    '''
    definicao dos Listeners para receber os updates dos traders

    As mensagens sao enviadas pelos traders por um Publisher que Broadcast a informacao.

    A mensagem vem com o ID do trader e a respectiva mensagem separados por ":" que eh tratada de acordo com o tipo de
    mensagem e updated na linha especifica de cada trader no GUI.
    '''

    # recebe o update de preco apregoado
    def listenerplacePrice(self, msg, extra=None):
        message = msg.split(":")
        trader = str(message[0])
        placePrice = message[1]
        print trader
        print placePrice
        print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 16, placePrice)
        logging.info("Em listenerplacePrice - vai atualizar: " + str(trader) + " - " + str(placePrice))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update do preco de fechamento
    def listenerclosePrice(self, msg, extra=None):
        message = msg.split(":")
        trader = message[0]
        closePrice = message[1]
        print trader
        print closePrice
        indexPair = pairIndex[trader]
        print str(pairIndex[trader])
        self.list_ctrl_1.SetStringItem(indexPair, 20, closePrice)
        logging.info("Em listenerclosePrice - vai atualizar: " + str(trader) + " - " + str(closePrice))
        # # self.list_ctrl_1.SetStringItem(currentItem, 9, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update do status do trader - inclui as informacoes da ordem enviada
    def listenerOrderStatus(self, msg, extra=None):
        print msg
        message = msg.split(",")
        if len(message) > 2:
            trader = str(message[0])
            extra = message[2]

        else:
            trader = str(message[0])
        print extra
        if extra == "FIM":
            indexPair = pairIndex[trader]

            print str(indexPair)
            self.list_ctrl_1.SetStringItem(indexPair, 3, msg)
            self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLACK)
            logging.info("Em listenerOrderStatus - vai atualizar: " + str(trader) + " - " + str(msg))
            # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)

            self.list_ctrl_1.SetItemBackgroundColour(indexPair,wx.GREEN)
            # self.list_ctrl_1.SetItemFont()


        else:
            indexPair = pairIndex[trader]
            print str(indexPair)
            self.list_ctrl_1.SetStringItem(indexPair, 3, msg)
            logging.info("Em listenerOrderStatus - vai atualizar: " + str(trader) + " - " + str(msg))
            # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
            self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
            time.sleep(0.001)
            self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update do volume operado
    def listenertradedVolume(self, msg, extra=None):
        print msg
        message = msg.split(":")
        trader = str(message[0])
        tradedVolume = str(message[1])
        # print trader
        # print placePrice
        # print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 2, tradedVolume)
        logging.info("Em listenertradedVolume - vai atualizar: " + str(trader) + " - " + str(tradedVolume))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update da posicao do trader
    def listenerPosition(self, msg, extra=None):
        print msg
        message = msg.split(":")
        trader = str(message[0])
        position = str(message[1])
        # print trader
        # print placePrice
        # print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 4, str(position))
        logging.info("Em listenerPosition - vai atualizar: " + str(trader) + " - " + str(position))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update do spread realizado
    def listenerRealSpread(self, msg, extra=None):
        print msg
        message = msg.split(":")
        trader = str(message[0])
        realSpread = str(message[1])
        # print trader
        # print placePrice
        # print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 6, "U$ " + realSpread)
        logging.info("Em listenerRealSpread - vai atualizar: " + str(trader) + " - " + str(realSpread))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update do spread medio
    def listenerAvgSpread(self, msg, extra=None):
        print msg
        message = msg.split(":")
        trader = str(message[0])
        avgSpread = str(message[1])
        # print trader
        # print placePrice
        # print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 7, "U$ " + avgSpread)
        logging.info("Em listenerAvgSpread - vai atualizar: " + str(trader) + " - " + str(avgSpread))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update da ultima margem bruta realizada
    def listenerlastGross(self, msg, extra=None):
        print msg
        message = msg.split(":")
        trader = str(message[0])
        lastGross = str(message[1])
        # print trader
        # print placePrice
        # print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 8, "U$ " + lastGross)
        logging.info("Em listenerlastGross - vai atualizar: " + str(trader) + " - " + str(lastGross))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe update do PNL
    def listenerPNL(self, msg, extra=None):
        print msg
        message = msg.split(":")
        trader = str(message[0])
        acumPNL = str(message[1])
        # print trader
        # print placePrice
        # print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 9, "U$ " + str(acumPNL))
        logging.info("Em listenerPNL - vai atualizar: " + str(trader) + " - " + str(acumPNL))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.YELLOW)
        # time.sleep(0.001)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLUE)

    # recebe o update de preco do cambio
    def listenerFXPrice(self, msg, extra=None):
        message = msg.split(":")
        trader = str(message[0])
        FXPrice = message[1]
        print trader
        print FXPrice
        print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 12, FXPrice)
        logging.info("Em listenerFXPrice - vai atualizar: " + str(trader) + " - " + str(FXPrice))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.GREEN)
        # time.sleep(0.01)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLACK)

    def listenerMarketSpread(self, msg, extra=None):
        message = msg.split(":")
        trader = str(message[0])
        marketSpread = message[1]
        print "TRADER ===>>>> " + trader
        print "Market Spread =====>>>>>>> " + str(marketSpread)
        print str(pairIndex)
        indexPair = pairIndex[trader]
        print str(indexPair)
        self.list_ctrl_1.SetStringItem(indexPair, 1, "U$ " + marketSpread)
        logging.info("Em listenerFXPrice - vai atualizar: " + str(trader) + " - " + str(marketSpread))
        # self.list_ctrl_1.SetStringItem(currentItem, 5, placePrice)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.GREEN)
        # time.sleep(0.01)
        # self.list_ctrl_1.SetItemTextColour(indexPair,wx.BLACK)

    '''
        Callbacks dos botoes de controle
    '''
    # callback de edicao do trader - ainda nao implementado
    def Edit_Pair(self, event):  # wxGlade: MyFrame1.<event_handler>

        event.Skip()

    # callback de pausa do trader - ainda nao implementado
    def Pause_Pair(self, event):  # wxGlade: MyFrame1.<event_handler>

        event.Skip()

    # # callback de criacao de novo trader - ainda nao implementado
    # def Create_New(self, event):  # wxGlade: MyFrame1.<event_handler>
    #     self.SelectedPair.dataPlace[placeOrderData.AMOUNT.value] = 5000
    #     event.Skip()

    # callback de criacao do menu ao clicar na linha do trader com o botao direito do mouse - ainda nao implementado
    def ShowMenu(self, event):  # wxGlade: MyFrame1.<event_handler>

        # only do this part the first time so the events are only bound once
        if not hasattr(self, "popupID1"):
            self.popupID1 = wx.NewId()
            self.popupID2 = wx.NewId()
            self.popupID3 = wx.NewId()
            self.popupID4 = wx.NewId()
            self.popupID5 = wx.NewId()
            self.popupID6 = wx.NewId()

            self.Bind(wx.EVT_MENU, self.showTrades, id=self.popupID1)
            self.Bind(wx.EVT_MENU, self.forceFill, id=self.popupID2)
            self.Bind(wx.EVT_MENU, self.Stop_PairPopUp, id=self.popupID3)
            self.Bind(wx.EVT_MENU, self.Start_PairPopUp, id=self.popupID4)
            self.Bind(wx.EVT_MENU, self.ChangeSpread, id=self.popupID5)
            self.Bind(wx.EVT_MENU, self.ChangeTotVolume, id=self.popupID6)

        # make a menu
        menu = wx.Menu()
        # add some items
        menu.Append(self.popupID1, "View trades")
        menu.Append(self.popupID2, "Force Fill")
        menu.Append(self.popupID3, "Stop")
        menu.Append(self.popupID4, "Start")
        menu.Append(self.popupID5, "Change Spread")
        menu.Append(self.popupID6, "Change Total Volume")

        # Popup the menu.  If an item is selected then its handler
        # will be called before PopupMenu returns.
        self.PopupMenu(menu)
        menu.Destroy()

    def showTrades(self, event):
        filename = self.SelectedPair.fileName
        f = open(filename, "r")
        msg = f.read()
        f.close()

        dlg = wx.lib.dialogs.ScrolledMessageDialog(self, msg, "Trades")
        dlg.ShowModal()

    def View_Connection(self, event):
            mktdataconnect = self.SelectedPair.MachineConnection_IP_MKTDATA
            OMSconnect = self.SelectedPair.MachineConnection_IP_OMS


            title = "Onde esta conectado: "

            dialog = wx.MessageDialog(self, message = "Maquina Conectada em: " + str(mktdataconnect) + " e em: " + str(OMSconnect), caption = "Conexao da Maquina", pos = wx.DefaultPosition)
            dialog.ShowModal()
            # dlg = Dialog(self, -1, title, "Maquina Conectada em: " + str(mktdataconnect) + " e em: " + str(OMSconnect), size=(1350, 1200),
            #                  style=wx.DEFAULT_DIALOG_STYLE,
            #                  )
            # dlg.CenterOnScreen()
            #
            # # this does not return until the dialog is closed.
            # val = dlg.ShowModal()
            #
            # dlg.Destroy()
    # altera o spread utilizado para realizar a estrategia
    def ChangeSpread(self, event):
        oldSpreaad = self.SelectedPair.Pmargem

        TraderID = self.SelectedPair.dataClose[placeOrderData.CORRID.value]

        title = "Change Spread of Trader: " + str(TraderID)

        dlg = Dialog(self, -1, title, "New Spread:", size=(1350, 1200),
                         style=wx.DEFAULT_DIALOG_STYLE,
                         )
        dlg.CenterOnScreen()

        # this does not return until the dialog is closed.
        val = dlg.ShowModal()

        if val == wx.ID_OK:
            # print "You pressed OK"
            newSpread = dlg.text.GetValue()
            self.SelectedPair.Pmargem = newSpread
            # variavel de Spread medio
            self.SelectedPair.average_spread = 0
            self.list_ctrl_1.SetStringItem(currentItem, 7, '0')
            try:
                self.SelectedPair.Calc_Place() # quando altera o spread ele chama o callback para recalcular o preco de apregoamento
            except:
                pass
            self.list_ctrl_1.SetStringItem(currentItem, 5, 'U$ ' + str(newSpread))
        else:
            dlg.Destroy()
            # print "You pressed Cancel"
        dlg.Destroy()

    # altera o volume total a ser operado pelo trader
    def ChangeTotVolume(self, event):
        oldTotVolume = self.SelectedPair.totalPairPosition # pega o volume total corrente

        TraderID = self.SelectedPair.dataClose[placeOrderData.CORRID.value]

        title = "Change Total Volume of Trader: " + str(TraderID)

        dlg = Dialog(self, -1, title, "New Total Volume:", size=(1350, 1200),
                         style=wx.DEFAULT_DIALOG_STYLE,
                         )
        dlg.CenterOnScreen()

        # this does not return until the dialog is closed.
        val = dlg.ShowModal()

        if val == wx.ID_OK:
            newTotVolume = dlg.text.GetValue()
            # print "You pressed OK"

            if newTotVolume <= self.SelectedPair.tradedVolume: # se o volume inserido eh menor que o volume operado nao deixa alterar

                wx.MessageBox(" O volume escolhido eh menor que o volume realizado. Por favor escolha outro valor")

            else: # do contrario
                # seta o volume total a ser operado no trader
                self.SelectedPair.totalPairPosition = newTotVolume
                # atualiza o GUI com o volume novo
                self.list_ctrl_1.SetStringItem(currentItem, 0, "Par - " + self.SelectedPair.dataPlace[placeOrderData.TICKER.value] + " - " +
                                     self.SelectedPair.dataPlace[placeOrderData.SIDE.value] + " - " + self.SelectedPair.dataClose[closeOrderData.TICKER.value] +
                                      " - " + str(self.SelectedPair.totalPairPosition))
        else:
            dlg.Destroy()
            # print "You pressed Cancel"
        dlg.Destroy()

    # forca a zerada do fechamento da arbitragem
    def forceFill(self, event):
        tickerClose = self.SelectedPair.dataClose[closeOrderData.TICKER.value]
        sideClose = self.SelectedPair.dataClose[closeOrderData.SIDE.value]
        closelmtprc = self.SelectedPair.close_lmtprc
        TraderID = self.SelectedPair.dataClose[placeOrderData.CORRID.value]

        title = " Trader: " + str(TraderID) + " :" + str(tickerClose) + " - " + str(sideClose) + " esta a " + str(closelmtprc)

        dlg = Dialog(self, -1, title, "Price to adjust:", size=(1350, 1200),
                         style=wx.DEFAULT_DIALOG_STYLE,
                         )
        dlg.CenterOnScreen()

        # this does not return until the dialog is closed.
        val = dlg.ShowModal()

        if val == wx.ID_OK:
            # print "You pressed OK"
            lmtprice = dlg.text.GetValue()
            dif = float(lmtprice) - float(closelmtprc)
            percentdif = abs(dif/closelmtprc)
            if percentdif > 0.1:
                wx.MessageBox("Seu valor esta maior de 10% de diferencaa do preco atual")

            else:
                self.SelectedPair.onforceFill(lmtprice) # chama o callback do Trader de forcefill
        else:
            dlg.Destroy()
            # print "You pressed Cancel"
        dlg.Destroy()

    # callback de inicializacao do trader
    def StartPair(self, event):  # wxGlade: MyFrame1.<event_handler>
        # inicializa o trader selecionado
        self.SelectedPair.start_pair()
        # atualiza o valor do indice do trader
        pairIndex[self.SelectedPair.dataPlace[placeOrderData.CORRID.value]] = currentItem
        self.list_ctrl_1.SetItemBackgroundColour(currentItem,wx.YELLOW)
        # LOG
        logging.info("Em StartPair - iniciei o par: " + str(self.SelectedPair.dataPlace[placeOrderData.CORRID.value]))
        # self.list_ctrl_1.SetStringItem(currentItem, 2, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 4, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 6, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 7, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 8, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 9, '0')
        event.Skip()

        # callback de inicializacao do trader
    def Start_PairPopUp(self, event):  # wxGlade: MyFrame1.<event_handler>
        # inicializa o trader selecionado
        self.SelectedPair.start_pair()
        # atualiza o valor do indice do trader
        pairIndex[self.SelectedPair.dataPlace[placeOrderData.CORRID.value]] = currentItem
        # LOG
        logging.info("Em StartPair - iniciei o par: " + str(self.SelectedPair.dataPlace[placeOrderData.CORRID.value]))
        # self.list_ctrl_1.SetStringItem(currentItem, 2, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 4, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 6, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 7, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 8, '0')
        # self.list_ctrl_1.SetStringItem(currentItem, 9, '0')
        event.Skip()

    # callback do item selecionado na lista de controle do GUI
    def Select_Pair(self, event):  # wxGlade: MyFrame1.<event_handler>
        # variavel do indice do trader selecionado
        global currentItem
        # Recebe o item selecionado
        currentItem = event.m_itemIndex
        # define o trader selecionado
        self.SelectedPair = Pairs[currentItem]
        print Pairs[currentItem].dataPlace
        print pairIndex[Pairs[currentItem].dataPlace[placeOrderData.CORRID.value]]
        print currentItem
        logging.info("Em Select_Pair - selecionou o par: " + str(pairIndex[Pairs[currentItem].dataPlace[placeOrderData.CORRID.value]]))
        event.Skip()

    # Callback do exclusao dos traders da lista de controle
    def ClearAll(self, event):  # wxGlade: MyFrame1.<event_handler>
        # self.StopAll(event)
        title = "Clear all"

        response = wx.MessageBox('Are you sure you want to clear all?', title, wx.YES_NO | wx.ICON_INFORMATION)

        if response == wx.YES:
            Pairs[:] = []
            self.SelectedPair = []
            pairIndex.clear()
            self.list_ctrl_1.DeleteAllItems()
            try:
                os.system('taskkill /f /im ' + self.marketdatafile) # fecha o processo do MKT data
                os.startfile(self.mktdata_path) # reinicia o mktdata
            except:
                wx.MessageBox("O servidor de Market Data nao foi aberto pelo sistema, se for necessario reinicie manualmente")
            self.index = 0
            print str(Pairs)
            event.Skip()
        else:
            pass

    # Callback de exclusao do trader selecionado
    def ClearPair(self, event):  # wxGlade: MyFrame1.<event_handler>
        print str(Pairs[currentItem])

        print currentItem
        # print pairIndex
        # counter = currentItem + 1
        # print counter
        # print Pairs[counter].dataPlace[placeOrderData.CORRID.value]
        # print pairIndex[Pairs[counter].dataPlace[placeOrderData.CORRID.value]]
        print self.index - 1
        for pair in pairIndex:
            print pair
            if pairIndex[pair] > currentItem:
                value = pairIndex[pair]
                pairIndex[pair] = value - 1
            print pair
            # counter += 1
            # print str(pairIndex)
            # print "Counter: " + str(counter)
            # print "self.index - 1 = " + str(self.index - 1)
        print Pairs
        pairIndex.pop(Pairs[currentItem].dataPlace[placeOrderData.CORRID.value])
        Pairs.pop(currentItem)
        self.list_ctrl_1.DeleteItem(currentItem)
        print str(pairIndex)
        self.index -= 1
        print self.index
        event.Skip()

    # Callback para parar o trader selecionado
    def StopPair(self, event):  # wxGlade: MyFrame1.<event_handler>
        Pairs[currentItem].stop_pair()
        # self.SelectedPair.totalPairPosition = int(self.SelectedPair.totalPairPosition) - int(self.SelectedPair.tradedVolume)
        # self.SelectedPair.tradedVolume = 0
        logging.info("Em Stop_Pair - parou o par: " + str(pairIndex[Pairs[currentItem].dataPlace[placeOrderData.CORRID.value]]))
        # self.list_ctrl_1.SetStringItem(currentItem, 0, "Par - " + self.SelectedPair.dataPlace[placeOrderData.TICKER.value] + " - " +
        #                                  self.SelectedPair.dataPlace[placeOrderData.SIDE.value] + " - " + self.SelectedPair.dataClose[closeOrderData.TICKER.value] +
        #                                   " - " + str(self.SelectedPair.totalPairPosition))

        event.Skip()

    # Callback para parar o trader selecionado
    def Stop_PairPopUp(self, event):  # wxGlade: MyFrame1.<event_handler>
        Pairs[currentItem].stop_pair()
        # self.SelectedPair.totalPairPosition = int(self.SelectedPair.totalPairPosition) - int(self.SelectedPair.tradedVolume)
        logging.info("Em Stop_Pair - parou o par: " + str(pairIndex[Pairs[currentItem].dataPlace[placeOrderData.CORRID.value]]))
        # self.list_ctrl_1.SetStringItem(currentItem, 0, "Par - " + self.SelectedPair.dataPlace[placeOrderData.TICKER.value] + " - " +
        #                                  self.SelectedPair.dataPlace[placeOrderData.SIDE.value] + " - " + self.SelectedPair.dataClose[closeOrderData.TICKER.value] +
        #                                   " - " + str(self.SelectedPair.totalPairPosition))
        event.Skip()

    # metodo que insere uma linha associado a um item na lista de controle do GUI
    def add_line(self, placeData, closeData, fxData):
        line = "Line %s" % self.index
        print line

        self.list_ctrl_1.InsertStringItem(self.index, "Par - " + placeData[placeOrderData.TICKER.value] + " - " +
                                          placeData[placeOrderData.SIDE.value] + " - " + closeData[closeOrderData.TICKER.value] +
                                          " - " + placeData[placeOrderData.TOTPAIRVOL.value])
        self.list_ctrl_1.SetStringItem(self.index, 1, 'nao carregado')
        self.list_ctrl_1.SetStringItem(self.index, 3, 'Loaded')
        self.list_ctrl_1.SetStringItem(self.index, 13, placeData[placeOrderData.TICKER.value])
        self.list_ctrl_1.SetStringItem(self.index, 14, placeData[placeOrderData.SIDE.value])
        self.list_ctrl_1.SetStringItem(self.index, 15, str(int(placeData[placeOrderData.AMOUNT.value])))
        self.list_ctrl_1.SetStringItem(self.index, 16, str(placeData[placeOrderData.LMTPRC.value]))
        self.list_ctrl_1.SetStringItem(self.index, 17, closeData[closeOrderData.TICKER.value])
        self.list_ctrl_1.SetStringItem(self.index, 18, newPair.close_Side) # newPair.close_Side
        self.list_ctrl_1.SetStringItem(self.index, 19, str(newPair.amount_Close)) #newPair.amount_Close
        self.list_ctrl_1.SetStringItem(self.index, 20, str(closeData[closeOrderData.LMTPRC.value]))
        self.list_ctrl_1.SetStringItem(self.index, 10, str(newPair.ratio)) #newPair.ratio
        self.list_ctrl_1.SetStringItem(self.index, 11, fxData[FXData.TICKER.value])
        self.list_ctrl_1.SetStringItem(self.index, 12, str(fxData[FXData.PRICE.value]))
        self.list_ctrl_1.SetStringItem(self.index, 2, '0')
        self.list_ctrl_1.SetStringItem(self.index, 4, '0')
        self.list_ctrl_1.SetStringItem(self.index, 5, 'U$ ' + str(placeData[placeOrderData.SPREAD_REQ.value]))
        self.list_ctrl_1.SetStringItem(self.index, 6, '0')
        self.list_ctrl_1.SetStringItem(self.index, 7, '0')
        self.list_ctrl_1.SetStringItem(self.index, 8, '0')
        self.list_ctrl_1.SetStringItem(self.index, 9, '0')

        self.index += 1

class Dialog(wx.Dialog):
    def __init__(self, parent, ID, title, title2, size=wx.DefaultSize, pos=wx.DefaultPosition,style=wx.DEFAULT_DIALOG_STYLE,
            ):

        # # Instead of calling wx.Dialog.__init__ we precreate the dialog
        # # so we can set an extra style that must be set before
        # # creation, and then we create the GUI object using the Create
        # # method.
        # pre = wx.PreDialog()
        # pre.SetExtraStyle(wx.DIALOG_EX_CONTEXTHELP)
        # pre.Create(parent, ID, title, pos, size, style)
        #
        # # This next step is the most important, it turns this Python
        # # object into the real wrapper of the dialog (instead of pre)
        # # as far as the wxPython extension is concerned.
        # self.PostCreate(pre)
        wx.Dialog.__init__(self, parent, ID, title, pos, size, style)

        # Now continue with the normal construction of the dialog
        # contents
        self.sizer = wx.BoxSizer(wx.VERTICAL)

        self.label = wx.StaticText(self, -1, title)
        self.label.SetHelpText("This is the help text for the label")
        self.sizer.Add(self.label, 0, wx.ALIGN_CENTRE|wx.ALL, 5)

        self.box = wx.BoxSizer(wx.HORIZONTAL)

        self.label = wx.StaticText(self, -1, title2)
        self.label.SetHelpText("This is the help text for the label")
        self.box.Add(self.label, 0, wx.ALIGN_CENTRE|wx.ALL, 5)

        self.text = wx.TextCtrl(self, -1, "", size=(80,-1))
        self.text.SetHelpText("Here's some help text for field #1")
        self.box.Add(self.text, 1, wx.ALIGN_CENTRE|wx.ALL, 5)


        self.sizer.Add(self.box, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)

        # box = wx.BoxSizer(wx.HORIZONTAL)
        #
        # label = wx.StaticText(self, -1, "Field #2:")
        # label.SetHelpText("This is the help text for the label")
        # box.Add(label, 0, wx.ALIGN_CENTRE|wx.ALL, 5)
        #
        # text = wx.TextCtrl(self, -1, "", size=(80,-1))
        # text.SetHelpText("Here's some help text for field #2")
        # box.Add(text, 1, wx.ALIGN_CENTRE|wx.ALL, 5)
        #
        # sizer.Add(box, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)

        self.line = wx.StaticLine(self, -1, size=(20,-1), style=wx.LI_HORIZONTAL)
        self.sizer.Add(self.line, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.TOP, 5)

        self.btnsizer = wx.StdDialogButtonSizer()

        if wx.Platform != "__WXMSW__":
            btn = wx.ContextHelpButton(self)
            btnsizer.AddButton(self.btn)

        self.btn = wx.Button(self, wx.ID_OK)
        self.btn.SetHelpText("The OK button completes the dialog")
        self.btn.SetDefault()
        self.btnsizer.AddButton(self.btn)

        self.btn = wx.Button(self, wx.ID_CANCEL)
        self.btn.SetHelpText("The Cancel button cancels the dialog. (Cool, huh?)")
        self.btnsizer.AddButton(self.btn)
        self.btnsizer.Realize()

        self.sizer.Add(self.btnsizer, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)

        self.SetSizer(self.sizer)
        self.sizer.Fit(self)



# Metodo abre a caixa de dialogo para selecionar o arquivo de dados dos traders - retorna o caminho do arquivo
def get_path(wildcard, Title):
    # app = wx.App(None)
    style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST
    dialog = wx.FileDialog(None, Title, wildcard=wildcard, style=style)
    if dialog.ShowModal() == wx.ID_OK:
        path = dialog.GetPath()
    else:
        path = None
    dialog.Destroy()
    return path


# end of class MyFrame1
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.App(0)
    # wx.InitAllImageHandlers()
    frame_1 = MyFrame1(None, wx.ID_ANY, "")
    frame_1.SetBackgroundColour(wx.BLACK)
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
